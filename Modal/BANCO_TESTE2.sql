/*
 PRODUTO = OS PRODUTOS QUE SÃO VENDIDOS, OS PRODUTOS QUE ESTÃO EM ESTOQUE.
 ENTRADA_PRODUTO = PRODUTOS QUE SÃO COMPRADOS
 NOTAS_FISCAIS = NUMEROS DAS NOTAS FISCAIS DOS PRODUTOS QUE SÃO COMPRADOS E DOS QUE JÁ ESTÃO NO ESTOQUE, INFORMAÇÕES PERTINENTES A NOTA FISCAL
 ESTOQUE = QUANTIDADE DOS PRODUTOS QUE AINDA ESTÃO DISPONIVEIS
 SAIDA_PRODUTO = INFORMAÇÕES DE VENDA DE PRODUTOS.
 */
CREATE TABLE PRODUTO (
	ID INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
	ID_ENTRADA_PRODUTO INT,
	FOREIGN KEY(ID_ENTRADA_PRODUTO) REFERENCES ENTRADA_PRODUTO(ID_PRODUTO)
);

CREATE TABLE ESTOQUE(
	ID_ESTOQUE INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
	QUANTIDADE INT NOT NULL,
	ESTOQUE_MINIMO INT,
	ID_ENTRADA_PRODUTO INT,
	FOREIGN KEY(ID_ENTRADA_PRODUTO) REFERENCES ENTRADA_PRODUTO(ID_PRODUTO)
);

/*
 /*
 A TABELA PRODUTO VAI APENAS OS PRODUTOS QUE VENDEMOS, A TABELA ENTRADA_PRODUTOS SÃO OS PRODUTOS QUE SÃO COMPRADOS, E É DELA QUE PEGAMOS  AS 
 INFORMAÇÕES PERTINENTES AO PRODUTO, COMO NUMERO DA NOTA FISCAL, DATA DE ENTRADA, VALOR UNITARIO, PREÇO  DE VENDA E ETC. E É ATRAVEZ DA FK DA TABELA PRODUTO
 QUE VEM DA TABELA ENTRADA PRODUTO QUE CONSEGUIMOS AS INFORMAÇÕES DO PRODUTO.
 */
CREATE TABLE ENTRADA_PRODUTO(
	ID_PRODUTO INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
	NOME_PRODUTO VARCHAR(100) NOT NULL,
	QUANTIDADE INT NOT NULL,
	DATA_CADASTRO DATE NOT NULL,
	VALOR_UNITARIO DECIMAL(10, 2) NOT NULL,
	NUMERO_NOTA INT NOT NULL,
	ID_FORNECEDOR INT NOT NULL,
	FOREIGN KEY(ID_FORNECEDOR) REFERENCES FORNECEDOR(ID_FORNECEDOR)
);

/* trazer chave primaria do estoque também */
/*
 NESSA TABELA VEM TODAS INFORMAÇÕES DOS PRODUTOS, COMO O NOME, QUANTIDADE COMPRADA, VALOR UNITARIO, DATA DE CADASTRO E AFINS
 */
-- CREATE TABLE NOTAS_FISCAIS(
-- 	ID_NOTA_FISCAL INT PRIMARY KEY AUTO_INCREMENT NOT NULL,
-- 	NUMERO_NOTA INT NOT NULL UNIQUE,
-- 	ID_FORNECEDOR INT NOT NULL,
-- 	FOREIGN KEY(ID_FORNECEDOR) REFERENCES FORNECEDOR(ID_FORNECEDOR)
-- );
/* 
 NESSA TABELA VAI APENAS AS INFORMAÇÕES PERTINENTES A NOTA FISCAL, A FK DESTA TABELA É A PK DE DA TABELA ENTRADA PRODUTO, PARA QUANDO O PRODUTO FOR 
 CADASTRADO, SABERMOS O NUMERO DA NOTA DELE
 */
CREATE TABLE FORNECEDOR (
	ID_FORNECEDOR INT PRIMARY KEY AUTO_INCREMENT NOT NULL,
	NOME_FORNECEDOR VARCHAR(50) NOT NULL,
	DATA_CADASTRO DATE NOT NULL,
	ENDERECO_FORNECEDOR VARCHAR(100) NOT NULL,
	CONTATO_FORNECEDOR VARCHAR(50) NOT NULL
);

/* INFORMAÇÕES DO FORNECEDOR */
-- NESSA TABELA FICAM ARMAZENADOS APENAS OS RESULTADOS DE VENDA DOS PRODUTOS,
CREATE TABLE SAIDA_PRODUTO (
	ID_VENDA INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
	ID_PRODUTO INT NOT NULL,
	QUANTIDADE INT NOT NULL,
	VALOR_VENDA DECIMAL(10, 2) NOT NULL,
	DATA_VENDA DATE NOT NULL,
	FORMA_PAGAMENTO ENUM('DIN', 'CRE', 'DEB') NOT NULL,
	FOREIGN KEY(ID_PRODUTO) REFERENCES ENTRADA_PRODUTO(ID_PRODUTO)
);

CREATE TABLE LISTA_PEDIDOS (
	ID_LISTA INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
	TITULO VARCHAR(30) NOT NULL,
	DATA_CADASTRO DATE NOT NULL,
	PEDIDO TEXT NOT NULL
);

-- SELECT E.ID_PRODUTO,
-- 	E.NOME_PRODUTO,
-- 	E.QUANTIDADE,
-- 	E.DATA_CADASTRO,
-- 	E.VALOR_UNITARIO,
-- 	P.ESTOQUE_MINIMO,
-- 	P.ESTOQUE_MAXIMA
-- FROM PRODUTO P
-- 	INNER JOIN ENTRADA_PRODUTO E ON P.ID_ENTRADA_PRODUTO = 10
-- 	AND E.ID_PRODUTO = 10;
-- SELECT E.*,
-- 	N.FORNECEDOR,
-- 	P.ESTOQUE_MAXIMA
-- FROM ENTRADA_PRODUTO E
-- 	INNER JOIN NOTAS_FISCAIS N ON E.NUMERO_NOTA = 6
-- 	AND N.NUMERO_NOTA = 6
-- 	INNER JOIN PRODUTO P ON E.ID_PRODUTO = P.ID_ENTRADA_PRODUTO;
-- /* INSERÇÕES */
-- FORNECEDORES
-- INSERT INTO `fornecedor`(
-- 		`NOME_FORNECEDOR`,
-- 		`DATA_CADASTRO`,
-- 		`ENDERECO_FORNECEDOR`,
-- 		`CONTATO_FORNECEDOR`
-- 	)
-- VALUES (
-- 		'TECH TECNOLOGIA',
-- 		'2020/07/29',
-- 		'GALERIA PAGE - BOX 240',
-- 		'tech@gmail.com - 3218-8541'
-- 	);
-- INSERT INTO `fornecedor`(
-- 		`NOME_FORNECEDOR`,
-- 		`DATA_CADASTRO`,
-- 		`ENDERECO_FORNECEDOR`,
-- 		`CONTATO_FORNECEDOR`
-- 	)
-- VALUES (
-- 		'FORNECEDOR 1',
-- 		'2020/08/19',
-- 		'GALERIA PAGE - BOX 110',
-- 		'fornecedor1@gmail.com - 3154-1928'
-- 	);
-- INSERT INTO `fornecedor`(
-- 		`NOME_FORNECEDOR`,
-- 		`DATA_CADASTRO`,
-- 		`ENDERECO_FORNECEDOR`,
-- 		`CONTATO_FORNECEDOR`
-- 	)
-- VALUES (
-- 		'FORNECEDOR 2',
-- 		'2020/09/09',
-- 		'GALERIA PAGE - BOX 54',
-- 		'fornecedor2@gmail.com - 0192-6473'
-- 	);
-- INSERT INTO `fornecedor`(
-- 		`NOME_FORNECEDOR`,
-- 		`DATA_CADASTRO`,
-- 		`ENDERECO_FORNECEDOR`,
-- 		`CONTATO_FORNECEDOR`
-- 	)
-- VALUES (
-- 		'FORNECEDOR 3',
-- 		'2020/10/23',
-- 		'GALERIA PAGE - BOX 54',
-- 		'fornecedor3@gmail.com - 0192-6473'
-- 	);
-- INSERT INTO `fornecedor`(
-- 		`NOME_FORNECEDOR`,
-- 		`DATA_CADASTRO`,
-- 		`ENDERECO_FORNECEDOR`,
-- 		`CONTATO_FORNECEDOR`
-- 	)
-- VALUES (
-- 		'FORNECEDOR 4',
-- 		'2020/11/30',
-- 		'GALERIA PAGE - BOX 54',
-- 		'fornecedor4@gmail.com - 0192-6473'
-- 	);
-- NOTAS FISCAIS
-- INSERT INTO `notas_fiscais`(`NUMERO_NOTA`, `ID_FORNECEDOR`)
-- VALUES (952384, 1);
-- INSERT INTO `notas_fiscais`(`NUMERO_NOTA`, `ID_FORNECEDOR`)
-- VALUES (745829, 1);
-- INSERT INTO `notas_fiscais`(`NUMERO_NOTA`, `ID_FORNECEDOR`)
-- VALUES (851020, 2);
-- INSERT INTO `notas_fiscais`(`NUMERO_NOTA`, `ID_FORNECEDOR`)
-- VALUES (005085, 2);
-- INSERT INTO `notas_fiscais`(`NUMERO_NOTA`, `ID_FORNECEDOR`)
-- VALUES (951782, 3);
-- INSERT INTO `notas_fiscais`(`NUMERO_NOTA`, `ID_FORNECEDOR`)
-- VALUES (789321, 3);
-- INSERT INTO `notas_fiscais`(`NUMERO_NOTA`, `ID_FORNECEDOR`)
-- VALUES (800001, 4);
-- INSERT INTO `notas_fiscais`(`NUMERO_NOTA`, `ID_FORNECEDOR`)
-- VALUES (900708, 4);
-- INSERT INTO `notas_fiscais`(`NUMERO_NOTA`, `ID_FORNECEDOR`)
-- VALUES (821092, 5);
-- INSERT INTO `notas_fiscais`(`NUMERO_NOTA`, `ID_FORNECEDOR`)
-- VALUES (531804, 5);
-- /* CADA NOTA FISCAL IRA SER APENAS DE UM PRODUTO ESPECIFICO, CRITERIO DE TESTE */
-- ENTRADA_PRODUTO
-- INSERT INTO `entrada_produto`(
-- 		`NOME_PRODUTO`,
-- 		`QUANTIDADE`,
-- 		`DATA_CADASTRO`,
-- 		`VALOR_UNITARIO`,
-- 		`NUMERO_NOTA`
-- 	)
-- VALUES (
-- 		'FONE DE OUVIDO BLUETOOTH JBL',
-- 		5,
-- 		'2020/08/09',
-- 		35.00,
-- 		951782
-- 	);
-- INSERT INTO `entrada_produto`(
-- 		`NOME_PRODUTO`,
-- 		`QUANTIDADE`,
-- 		`DATA_CADASTRO`,
-- 		`VALOR_UNITARIO`,
-- 		`NUMERO_NOTA`
-- 	)
-- VALUES (
-- 		'FONE DE OUVIDO P2 JBL',
-- 		11,
-- 		'2020/08/09',
-- 		15.00,
-- 		951782
-- 	);
-- INSERT INTO `entrada_produto`(
-- 		`NOME_PRODUTO`,
-- 		`QUANTIDADE`,
-- 		`DATA_CADASTRO`,
-- 		`VALOR_UNITARIO`,
-- 		`NUMERO_NOTA`
-- 	)
-- VALUES ('FONE SAMSUMG', 8, '2020/08/09', 2.50, 951782);
-- INSERT INTO `entrada_produto`(
-- 		`NOME_PRODUTO`,
-- 		`QUANTIDADE`,
-- 		`DATA_CADASTRO`,
-- 		`VALOR_UNITARIO`,
-- 		`NUMERO_NOTA`
-- 	)
-- VALUES (
-- 		'SUPORTE PARA BICICLETA',
-- 		5,
-- 		'2020/08/09',
-- 		5.00,
-- 		789321
-- 	);
-- INSERT INTO `entrada_produto`(
-- 		`NOME_PRODUTO`,
-- 		`QUANTIDADE`,
-- 		`DATA_CADASTRO`,
-- 		`VALOR_UNITARIO`,
-- 		`NUMERO_NOTA`
-- 	)
-- VALUES ('CABO V8', 20, '2020/08/09', 5.00, 951782);
-- INSERT INTO `entrada_produto`(
-- 		`NOME_PRODUTO`,
-- 		`QUANTIDADE`,
-- 		`DATA_CADASTRO`,
-- 		`VALOR_UNITARIO`,
-- 		`NUMERO_NOTA`
-- 	)
-- VALUES (
-- 		'CAPA DE VOLANTE',
-- 		18,
-- 		'2020/08/09',
-- 		5.00,
-- 		800001
-- 	);
-- INSERT INTO `entrada_produto`(
-- 		`NOME_PRODUTO`,
-- 		`QUANTIDADE`,
-- 		`DATA_CADASTRO`,
-- 		`VALOR_UNITARIO`,
-- 		`NUMERO_NOTA`
-- 	)
-- VALUES ('CONTROLE DE TV', 5, '2020/08/09', 5.00, 900708);
-- INSERT INTO `entrada_produto`(
-- 		`NOME_PRODUTO`,
-- 		`QUANTIDADE`,
-- 		`DATA_CADASTRO`,
-- 		`VALOR_UNITARIO`,
-- 		`NUMERO_NOTA`
-- 	)
-- VALUES (
-- 		'CARREGADOR UNIVERSAL',
-- 		16,
-- 		'2020/08/09',
-- 		2.00,
-- 		531804
-- 	);
-- INSERT INTO `entrada_produto`(
-- 		`NOME_PRODUTO`,
-- 		`QUANTIDADE`,
-- 		`DATA_CADASTRO`,
-- 		`VALOR_UNITARIO`,
-- 		`NUMERO_NOTA`
-- 	)
-- VALUES (
-- 		'SUPORTE PARA TV',
-- 		10,
-- 		'2020/08/09',
-- 		4.00,
-- 		951782
-- 	);
-- INSERT INTO `entrada_produto`(
-- 		`NOME_PRODUTO`,
-- 		`QUANTIDADE`,
-- 		`DATA_CADASTRO`,
-- 		`VALOR_UNITARIO`,
-- 		`NUMERO_NOTA`
-- 	)
-- VALUES (
-- 		'PELICULA VIDRO IPHONE',
-- 		10,
-- 		'2020/08/09',
-- 		4.00,
-- 		952384
-- 	);
-- PRODUTO
-- INSERT INTO `produto`(`ESTOQUE_MINIMO`, `ID_ENTRADA_PRODUTO`)
-- VALUES (5, 19);
-- INSERT INTO `produto`(`ESTOQUE_MINIMO`, `ID_ENTRADA_PRODUTO`)
-- VALUES (5, 20);
-- INSERT INTO `produto`(`ESTOQUE_MINIMO`, `ID_ENTRADA_PRODUTO`)
-- VALUES (5, 21);
-- INSERT INTO `produto`(`ESTOQUE_MINIMO`, `ID_ENTRADA_PRODUTO`)
-- VALUES (10, 22);
-- INSERT INTO `produto`(`ESTOQUE_MINIMO`, `ID_ENTRADA_PRODUTO`)
-- VALUES (10, 23);
-- INSERT INTO `produto`(`ESTOQUE_MINIMO`, `ID_ENTRADA_PRODUTO`)
-- VALUES (10, 24);
-- INSERT INTO `produto`(`ESTOQUE_MINIMO`, `ID_ENTRADA_PRODUTO`)
-- VALUES (7, 25);
-- INSERT INTO `produto`(`ESTOQUE_MINIMO`, `ID_ENTRADA_PRODUTO`)
-- VALUES (7, 26);
-- INSERT INTO `produto`(`ESTOQUE_MINIMO`, `ID_ENTRADA_PRODUTO`)
-- VALUES (7, 27);
-- INSERT INTO `produto`(`ESTOQUE_MINIMO`, `ID_ENTRADA_PRODUTO`)
-- VALUES (3, 29);
-- INSERT INTO `produto`(`ESTOQUE_MINIMO`, `ID_ENTRADA_PRODUTO`)
-- VALUES (3, 28);
-- INSERT INTO `produto`(`ESTOQUE_MINIMO`, `ID_ENTRADA_PRODUTO`)
-- VALUES (3, 10);
-- INSERT INTO `produto`(`ESTOQUE_MINIMO`, `ID_ENTRADA_PRODUTO`)
-- VALUES (15, 11);
-- INSERT INTO `produto`(`ESTOQUE_MINIMO`, `ID_ENTRADA_PRODUTO`)
-- VALUES (15, 12);
-- INSERT INTO `produto`(`ESTOQUE_MINIMO`, `ID_ENTRADA_PRODUTO`)
-- VALUES (15, 13);
SELECT
	LAST_INSERT_ID();

-- DEU CERTO
DELIMITER $ $ DROP PROCEDURE IF EXISTS CADASTRO_PRODUTO $ $ CREATE PROCEDURE CADASTRO_PRODUTO(
	IN NOME_PRODUTO VARCHAR(255),
	IN QUANTIDADE INT,
	IN DATA_CADASTRO DATE,
	IN VALOR_UNITARIO DECIMAL(10, 2),
	IN ID_USUARIO INT,
	IN NUMERO_NOTA_FISCAL INT,
	IN FORNECEDOR_ID_FORNECEDOR INT
) BEGIN DECLARE msg VARCHAR(1000) DEFAULT "NADA A EXIBIR";

DECLARE excecao SMALLINT DEFAULT 0;

DECLARE ID_NOTA_FISCAL INT;

DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
SET
	excecao = 1;

START TRANSACTION;

INSERT INTO
	entrada_produto (
		NOME_PRODUTO,
		QUANTIDADE,
		DATA_CADASTRO,
		VALOR_UNITARIO,
		ID_USUARIO_CADASTRO
	)
VALUES
	(
		NOME_PRODUTO,
		QUANTIDADE,
		DATA_CADASTRO,
		VALOR_UNITARIO,
		ID_USUARIO
	);

IF excecao = 1 THEN
SET
	msg = "ALERTA: ERRO AO INSERIR NA TABELA ENTRADA_PRODUTO";

ROLLBACK;

ELSE
SET
	ID_NOTA_FISCAL = (
		SELECT
			MAX(ID_PRODUTO)
		FROM
			entrada_produto
	);

IF excecao = 1 THEN
SET
	msg = "ALERTA: ERRO AO BUSCAR O ULTIMO ID DA TABELA ENTRADA_PRODUTO";

ROLLBACK;

ELSE
INSERT INTO
	nota_fiscal(
		NUMERO_NOTA_FISCAL,
		DATA_CADASTRO,
		USUARIOS_ID_USUARIO,
		ENTRADA_PRODUTO_ID_PRODUTO,
		FORNECEDOR_ID_FORNECEDOR
	)
VALUES
	(
		NUMERO_NOTA_FISCAL,
		DATA_CADASTRO,
		ID_USUARIO,
		ID_NOTA_FISCAL,
		FORNECEDOR_ID_FORNECEDOR
	);

IF excecao = 1 THEN
SET
	msg = "ALERTA: ERRO AO INSERIR NA TABELA NOTA FISCAL";

ROLLBACK;

END IF;

END IF;

END IF;

IF excecao <> 1 THEN COMMIT;

SET
	msg = "ALERTA: REGISTROS INSERIDOS COM SUCESSO";

END IF;

SELECT
	msg AS msg;

END $ $ call TESTE_4('CAPA TESTE', 10, now(), 5.90, 1, 1210, 2);

call TESTE_4('DAVIDSON', 7, now(), 7.90, 1, 120, 1);

SELECT
	NOME_PRODUTO
FROM
	ENTRADA_PRODUTO
	INNER JOIN nota_fiscal N ON NUMERO_NOTA_FISCAL = 1210;

SELECT
	DISTINCT E.NOME_PRODUTO,
	N.NUMERO_NOTA_FISCAL
FROM
	ENTRADA_PRODUTO E
	INNER JOIN nota_fiscal N ON NUMERO_NOTA_FISCAL = 1210;

DELIMITER $ $ DROP PROCEDURE IF EXISTS TESTE_2 $ $ CREATE PROCEDURE TESTE_2(
	IN NOME_PRODUTO VARCHAR(255),
	IN QUANTIDADE INT,
	IN DATA_CADASTRO DATE,
	IN VALOR_UNITARIO DECIMAL(10, 2),
	IN ID_USUARIO INT,
	IN NOME_FORNECEDOR VARCHAR(255),
	IN NUMERO_NOTA_FISCAL INT
) BEGIN DECLARE msg VARCHAR(1000) DEFAULT "NADA A EXIBIR";

DECLARE excecao SMALLINT DEFAULT 0;

DECLARE ID_NOTA_FISCAL INT;

DECLARE COD_FORNECEDOR INT;

DECLARE TESTE1 INT;

DECLARE TESTE2 INT;

DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
SET
	excecao = 1;

START TRANSACTION;

INSERT INTO
	entrada_produto (
		NOME_PRODUTO,
		QUANTIDADE,
		DATA_CADASTRO,
		VALOR_UNITARIO,
		ID_USUARIO_CADASTRO
	)
VALUES
	(
		NOME_PRODUTO,
		QUANTIDADE,
		DATA_CADASTRO,
		VALOR_UNITARIO,
		ID_USUARIO
	);

IF excecao = 1 THEN
SET
	msg = "ALERTA: ERRO AO INSERIR NA TABELA ENTRADA_PRODUTO";

ROLLBACK;

ELSE
SET
	ID_NOTA_FISCAL = (
		SELECT
			MAX(ID_PRODUTO)
		FROM
			entrada_produto
	);

SET
	COD_FORNECEDOR = (
		SELECT
			ID_FORNECEDOR
		FROM
			fornecedor
		WHERE
			NOME_FORNECEDOR = 'NOME_FORNECEDOR';

);

IF excecao = 1 THEN
SET
	msg = 'ERRO AO OBTER O ID NOTA FISCAL OU O CODIGO DO FORNECEDOR';

ROLLBACK;

ELSE
INSERT INTO
	nota_fiscal(
		NUMERO_NOTA_FISCAL,
		DATA_CADASTRO,
		USUARIOS_ID_USUARIO,
		ENTRADA_PRODUTO_ID_PRODUTO,
		FORNECEDOR_ID_FORNECEDOR
	)
VALUES
	(
		NUMERO_NOTA_FISCAL,
		DATA_CADASTRO,
		ID_USUARIO,
		ID_NOTA_FISCAL,
		COD_FORNECEDOR
	);

IF excecao = 1 THEN
SET
	msg = COD_FORNECEDOR;

ROLLBACK;

END IF;

END IF;

END IF;

IF excecao <> 1 THEN COMMIT;

SET
	msg = "REGISTROS INSERIDOS COM SUCESSO";

END IF;

SELECT
	msg AS msg;

END $ $ call TESTE_CADASTRO_PRODUTO(
	'CAPA TESTE_5',
	10,
	now(),
	5.90,
	1,
	'Tech Fornecedores',
	2090
);

call TESTE_1(
	'CAPA TESTE_5',
	10,
	now(),
	5.90,
	1,
	'Tech Fornecedores',
	2090
);

-- SELECT PESQUISAR ESTOQUE
SELECT
	DISTINCT N.NUMERO_NOTA_FISCAL,
	P.NOME_PRODUTO,
	P.QUANTIDADE,
	P.VALOR_UNITARIO,
	(P.QUANTIDADE * P.VALOR_UNITARIO) AS 'TOTAL'
FROM
	ENTRADA_PRODUTO P
	INNER JOIN FORNECEDOR F
	INNER JOIN NOTA_FISCAL N ON FORNECEDOR_ID_FORNECEDOR = F.ID_FORNECEDOR
SELECT
	DISTINCT N.*,
	P.*,
	F.*
FROM
	NOTA_FISCAL N
	INNER JOIN ENTRADA_PRODUTO P
	INNER JOIN FORNECEDOR F ON NUMERO_NOTA_FISCAL = '1223';

SELECT
	NOME_PRODUTO,
	QUANTIDADE,
	VALOR_UNITARIO,
	(QUANTIDADE * VALOR_UNITARIO) AS 'TOTAL'
FROM
	entrada_produto;

SELECT
	N.NUMERO_NOTA_FISCAL,
	P.NOME_PRODUTO,
	F.NOME_FORNECEDOR,
	P.QUANTIDADE,
	N.DATA_CADASTRO,
	P.VALOR_UNITARIO,
	(P.QUANTIDADE * P.VALOR_UNITARIO) AS 'TOTAL'
FROM
	nota_fiscal N
	INNER JOIN entrada_produto P ON N.ENTRADA_PRODUTO_ID_PRODUTO = P.ID_PRODUTO
	INNER JOIN fornecedor F ON N.FORNECEDOR_ID_FORNECEDOR = F.ID_FORNECEDOR
WHERE
	N.NUMERO_NOTA_FISCAL = 1210;

SELECT
	N.NUMERO_NOTA_FISCAL,
	P.NOME_PRODUTO,
	F.NOME_FORNECEDOR,
	P.QUANTIDADE,
	N.DATA_CADASTRO,
	P.VALOR_UNITARIO,
	(P.QUANTIDADE * P.VALOR_UNITARIO) AS 'TOTAL'
FROM
	nota_fiscal N
	INNER JOIN entrada_produto P ON N.ENTRADA_PRODUTO_ID_PRODUTO = P.ID_PRODUTO
	INNER JOIN fornecedor F ON N.FORNECEDOR_ID_FORNECEDOR = F.ID_FORNECEDOR
WHERE
	N.NUMERO_NOTA_FISCAL = 1998;